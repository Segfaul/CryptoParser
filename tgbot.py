from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher #–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
from aiogram.utils import executor
from cfg import token
from time import sleep

#Crypto part(stats taken from ---> coinmarketcap.com)
from parseCrypto import Check_lofcoin, get_arr_stat

#To work with database
from wdb import Input_data, Check_on_exist, Change_loc, Check_loc, Check_lid, Change_lid

#Library to get messages after command
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

#Bot instruct and DB name
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
client_db = "users.db"
async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')
class Formv(StatesGroup):
    loc = State()

@dp.message_handler(commands=['start'])
async def commands_start(message : types.Message):
    try:
        await message.delete()
        if Check_on_exist(client_db, message.from_user.id) == 0:
            await bot.send_message(message.from_user.id, f"&#12840 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username} &#12840\n–Ø &#129302 –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å &#128073 /loc", parse_mode='html')
            Input_data(client_db, message.from_user.id)
        else:
            await bot.send_message(message.from_user.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, @{message.from_user.username}\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ\n–ò–ª–∏ –∂–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /encrypt", parse_mode='html')
    except Exception as e:
        print(repr(e))

@dp.message_handler(commands=['help', 'hlp', 'hp', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'])
async def commands_start(message : types.Message):
    try:
        if Check_on_exist(client_db, message.from_user.id) == 0:
            Input_data(client_db, message.from_user.id)
        await message.reply(f"&#128206 –ü–æ–¥—Ä–æ–±–Ω–æ –æ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ–º–º–∞–Ω–¥ &#128206\n\n‚îú/start {md.hitalic('- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}\n‚îú/enc {md.hitalic('- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}\n‚îú/loc {md.hitalic('- –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç')}\n‚îú/myl {md.hitalic('- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –º–æ–Ω–µ—Ç')}", parse_mode='html')
    except: pass

@dp.message_handler(commands=['myl'])
async def commands_start(message : types.Message):
    try:
        if Check_on_exist(client_db, message.from_user.id) == 0:
            Input_data(client_db, message.from_user.id)
        await message.delete()
        f = await bot.send_message(message.from_user.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É... –ò—â—É –≤–∞—à —Å–ø–∏—Å–æ–∫... &#9203", parse_mode='html')
        sleep(1.5)
        await f.delete()
        ans = Check_loc(client_db, message.from_user.id)
        if ans in [-1, 'none']:
            await bot.send_message(message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π &#128549\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /loc –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ &#128203", parse_mode='html')
        else:
            await bot.send_message(message.from_user.id, f"–§—É—Ö, –∫–∞–∂–µ—Ç—Å—è –Ω–∞—à–µ–ª &#128517\n\n{md.hitalic(f'{ans}')}", parse_mode='html')
    except: pass

@dp.message_handler(commands=['encrypt', 'enc', 'crypt'])
async def commands_start(message : types.Message):
    try:
        if Check_on_exist(client_db, message.from_user.id) == 0:
            Input_data(client_db, message.from_user.id)
        await message.delete()
        arr = Check_loc(client_db, message.from_user.id)
        if arr == 'none':
            await bot.send_message(message.from_user.id, "–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥, –≤–∞—à —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ –∞–∫—Ç–∏–≤–æ–≤ –ø—É—Å—Ç\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /loc &#128521", parse_mode='html')
        elif arr not in [-1, 'none']:
            if Check_lid(client_db, message.from_user.id) == -1:
                await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
            elif Check_lid(client_db, message.from_user.id) == 'none':
                f = await bot.send_message(message.from_user.id, "–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥... &#128187\n")
                await f.delete()
                ans = get_arr_stat(arr.split(', '))
                mess = await bot.send_message(message.from_user.id, f"{ans}", parse_mode='html')
                Change_lid(client_db, message.from_user.id, mess.message_id)
            else:
                idm = int(Check_lid(client_db, message.from_user.id))
                await bot.delete_message(message.from_user.id, message_id=idm)
                f = await bot.send_message(message.from_user.id, "–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥... &#128187\n")
                await f.delete()
                ans = get_arr_stat(arr.split(', '))
                mess = await bot.send_message(message.from_user.id, f"{ans}", parse_mode='html')
                Change_lid(client_db, message.from_user.id, mess.message_id)
    except Exception as e: print(repr(e))

@dp.message_handler(commands=['loc'])
async def cmd_start(message: types.Message):
    try:
        if Check_on_exist(client_db, message.from_user.id) == 0:
            Input_data(client_db, message.from_user.id)
        await Formv.loc.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ ',' –≤—Å–µ –Ω—É–∂–Ω—ã–µ –º–æ–Ω–µ—Ç—ã(–Ω–µ –∫—Ä–∞—Ç–∫–æ)\n–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üëâ /–æ—Ç–º–µ–Ω–∞")
    except: pass


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply("–≤–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message_handler(state=Formv.loc)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['name'] = message.text
        loc = data['name'].split(', ')
        if Check_lofcoin(loc) != -1:
            Change_loc(client_db, message.from_user.id, data['name'])
            await bot.send_message(
                    message.from_user.id,
                    md.text(
                        md.text('‚úî –ù–æ–≤—ã–π –ª–∏—Å—Ç –º–æ–Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω ‚úî\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /myl'),
                        sep='\n',
                    )
                , parse_mode='html'
            )
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, "–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥&#128269", parse_mode='html')
            await state.finish()
    except:
        try:
            await bot.send_message(message.from_user.id, "–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥&#128269", parse_mode='html')
            await state.finish()
        except: pass
executor.start_polling(dp, skip_updates=True, on_startup=on_startup)